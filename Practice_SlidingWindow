# GROKKING - SLIDING WINDOW PROBLEMS

# SLIDING WINDOW ALGORITHM
def find_averages_of_subarrays(K, arr):
    result = []
    windowSum = 0.0
    windowStart = 0

    for windowEnd in range(0, len(arr)):
        windowSum += arr[windowEnd] 
        # When we hit the required window size, K, start sliding the window
        if windowEnd >= K - 1:
            result.append(windowSum / K) # Calculate the average and add it to results
            windowSum -= arr[windowStart] # Subtract the first element 
            windowStart += 1 # Slide the window to the right

    return result


def main():
    result = find_averages_of_subarrays(5, [1, 3, 2, 6, -1, 4, 1, 8, 2])
    print("Averages of subarrays of size K: " + str(result))

main()


#######################################################################################

# MAXIMUM SUM SUBARRAY OF SIZE K
def max_sub_array_of_size_k(K, arr):
    max_sum = 0
    windowSum = 0
    windowStart = 0

    for windowEnd in range(0, len(arr)):
        windowSum += arr[windowEnd]
        if windowEnd >= K - 1:
            max_sum = max(max_sum, windowSum)
            windowSum -= arr[windowStart]
            windowStart += 1
    
    return max_sum

def main():
    print("Maximum sum of a subarray of size K: " + str(max_sub_array_of_size_k(3, [2, 1, 5, 1, 3, 2]))) 
    print("Maximum sum of a subarray of size K: " + str(max_sub_array_of_size_k(2, [2, 3, 4, 1, 5])))

main()

# Time Complexity = O(N)
# Space Complexity = O(1)


#######################################################################################

# SMALLEST SUBARRAY WITH A GREATER SUM

def smallest_subarray_sum(s, arr):
    min_length = len(arr) + 1
    windowSum = 0
    windowStart = 0

    for windowEnd in range(0, len(arr)):
        windowSum += arr[windowEnd]
        # Continue growing window until we reach a sum greater than or equal to the target "s"
        while windowSum >= s:
            min_length = min(min_length, windowEnd - windowStart + 1)
            windowSum -= arr[windowStart]
            windowStart += 1
    
    if min_length == len(arr) + 1:
        return 0
    else:
        return min_length

def main():
    print("Smallest subarry length: " + str(smallest_subarray_sum(7, [2, 1, 5, 2, 3, 2])))
    print("Smallest subarray length: " + str(smallest_subarray_sum(8, [3, 4, 1, 1, 6])))
    print("Smallest subarray length: " + str(smallest_subarray_sum(8, [2, 2, 1, 1, 1, 1])))

main()

# Time Complexity = O(N)
# Space Complexity = O(1)


#######################################################################################

# LONGEST SUBSTRING WITH MAXIMUM K DISTINCT CHARACTERS
def longest_substring_with_k_distinct(str1, K):
    windowStart = 0
    max_length = 0
    char_frequency = {}

    # Extend the range of the window until we reach a non-distinct character
    for windowEnd in range(0, len(str1)):
        right_char = str1[windowEnd]
        # Add new elements to the hashmap/update values of elements in hashmap
        if right_char not in char_frequency:
            char_frequency[right_char] = 0
        char_frequency[right_char] += 1

        # If we hit more than K distinct characters, begin shrinking window
        while len(char_frequency) > K:
            left_char = str1[windowStart]
            char_frequency[left_char] -= 1
            # If char_frequency is zero, remove it from the hashmap
            if char_frequency[left_char] == 0:
                del char_frequency[left_char]
            windowStart += 1
        max_length = max(max_length, windowEnd - windowStart + 1)
    return max_length

def main():
    print("Length of the longest substring: " + str(longest_substring_with_k_distinct("araaci", 2)))
    print("Length of the longest substring: " + str(longest_substring_with_k_distinct("araaci", 1)))
    print("Length of the longest substring: " + str(longest_substring_with_k_distinct("cbbebi", 3)))

main()

# Time Complexity = O(N)
# Space Complexity = O(K)


#####################################################################################

# FRUITS INTO BASKETS
def fruits_into_baskets(fruits, max_fruit_types):
    windowStart = 0
    max_length = 0
    fruit_frequency = {}

    for windowEnd in range(len(fruits)):
        right_fruit = fruits[windowEnd]
        if right_fruit not in fruit_frequency:
            fruit_frequency[right_fruit] = 0
        fruit_frequency[right_fruit] += 1

        while len(fruit_frequency) > max_fruit_types:
            left_fruit = fruits[windowStart]
            fruit_frequency[left_fruit] -= 1
            if fruit_frequency[left_fruit] == 0:
                del fruit_frequency[left_fruit]
            windowStart += 1
        max_length = max(max_length, windowEnd - windowStart + 1)
    return max_length

def main():
    print("Maximum number of fruits: " + str(fruits_into_baskets(['A', 'B', 'C', 'A', 'C'], 2)))
    print("Maximum number of fruits: " + str(fruits_into_baskets(['A', 'B', 'C', 'B', 'B', 'C'], 2)))

main()

# Time Complexity = O(N)
# Space Complexity = O(1)


######################################################################################

# LONGEST SUBSTRING WITH DISTINCT CHARACTERS
def non_repeat_substring(str1):
    windowStart = 0 
    max_length = 0 
    char_map = {}

    # Extend range of substring
    for windowEnd in range(len(str1)):
        right_char = str1[windowEnd]
        # if the map already contains 'right_char', then shrink the window from the start
        if right_char in char_map:
            windowStart = max(windowStart, char_map[right_char] + 1)
        # if the map doesn't contain 'right_char, then add it to the char_map
        char_map[right_char] = windowEnd
        # Keep track of the maximum length
        max_length = max(max_length, windowEnd - windowStart + 1)

    return max_length

def main():
    print("Length of the longest substring: " + str(non_repeat_substring("aabccbb")))
    print("Length of the longest substring: " + str(non_repeat_substring("abbbb")))
    print("Length of the longest substring: " + str(non_repeat_substring("abccde")))

main()

# Time Complexity = O(N)
# Space Complexity = O(K)

######################################################################################

# LONGEST SUBSTRING WITH SAME LETTERS AFTER REPLACEMENT
# Given a string with lowercase letters only, if you are allowed to replace no more
# than k letters with any letter, find the length of the longest substring having the
# same letters after replacement

def length_of_longest_substring(str1, k):
    window_start = 0
    max_length = 0
    max_repeat_letter_count = 0
    frequency_map = {}

    # Try to extend the range of the window
    for window_end in range(0, len(str1)):
        right_char = str1[window_end]
        if right_char not in frequency_map:
            frequency_map[right_char] = 0
        frequency_map[right_char] += 1

        # Keep track of the max repeating letter count, updating with each character added
        # to the dictionary
        max_repeat_letter_count = max(max_repeat_letter_count, frequency_map[right_char])

        # If the remaining letter count is larger than the number we can replace (k)...
        if (window_end - window_start + 1 - max_repeat_letter_count) > k:
            # Begin shrinking the window from the start, until we are equal to "k"
            left_char = str1[window_start]
            frequency_map[left_char] -= 1
            window_start += 1

        # Determine the max length after we reached an acceptable range
        max_length = max(max_length, window_end - window_start + 1)

    return max_length


def main():
  print("Length of the longest substring with k replaced characters: " + str(length_of_longest_substring("aabccbb", 2)))
  print("Length of the longest substring with k replaced characters: " + str(length_of_longest_substring("abbcb", 1)))
  print("Length of the longest substring with k replaced characters: " + str(length_of_longest_substring("abccde", 1)))

main()

# Time Complexity = O(N)
# Space Complexity = O(1)

######################################################################################


