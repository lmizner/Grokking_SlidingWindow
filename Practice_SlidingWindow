# GROKKING - SLIDING WINDOW PROBLEMS

# SLIDING WINDOW ALGORITHM
def find_averages_of_subarrays(K, arr):
    result = []
    windowSum = 0.0
    windowStart = 0

    for windowEnd in range(0, len(arr)):
        windowSum += arr[windowEnd] 
        # When we hit the required window size, K, start sliding the window
        if windowEnd >= K - 1:
            result.append(windowSum / K) # Calculate the average and add it to results
            windowSum -= arr[windowStart] # Subtract the first element 
            windowStart += 1 # Slide the window to the right

    return result


def main():
    result = find_averages_of_subarrays(5, [1, 3, 2, 6, -1, 4, 1, 8, 2])
    print("Averages of subarrays of size K: " + str(result))

main()


#######################################################################################

# MAXIMUM SUM SUBARRAY OF SIZE K
def max_sub_array_of_size_k(K, arr):
    max_sum = 0
    windowSum = 0
    windowStart = 0

    for windowEnd in range(0, len(arr)):
        windowSum += arr[windowEnd]
        if windowEnd >= K - 1:
            max_sum = max(max_sum, windowSum)
            windowSum -= arr[windowStart]
            windowStart += 1
    
    return max_sum

def main():
    print("Maximum sum of a subarray of size K: " + str(max_sub_array_of_size_k(3, [2, 1, 5, 1, 3, 2]))) 
    print("Maximum sum of a subarray of size K: " + str(max_sub_array_of_size_k(2, [2, 3, 4, 1, 5])))

main()
